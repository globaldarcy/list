---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Form">
    <main>
        <div class="container">
            <div class="custom-select">
                <select id="sel1">
                    <option value="option1">Option 1</option>
                    <option value="option2">Option 2</option>
                    <option value="option3">Option 3</option>
                </select>
            </div>
        </div>
        <div class="container">
            <div class="custom-select">
                <select id="sel2">
                    <option value="option1">Option 1</option>
                    <option value="option2">Option 2</option>
                    <option value="option3">Option 3</option>
                </select>
            </div>
        </div>
        <div class="container">
            <div class="custom-select">
                <select>
                    <option value="option1">Option 1</option>
                    <option value="option2">Option 2</option>
                    <option value="option3">Option 3</option>
                </select>
            </div>
            <div class="custom-select">
                <select>
                    <option value="option1">Option 1</option>
                    <option value="option2">Option 2</option>
                    <option value="option3">Option 3</option>
                </select>
            </div>
            <div class="custom-select">
                <select>
                    <option value="option1">Option 1</option>
                    <option value="option2">Option 2</option>
                    <option value="option3">Option 3</option>
                </select>
            </div>
        </div>
    </main>
</Layout>

<style is:global>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    .container {
        margin: 50px auto;
        width: 800px;
    }
    .custom-select {
        margin: 10px;
        position: relative;
    }
    /* 隐藏原生的 select 元素 */
    select {
        z-index: -1;
        position: absolute;
        top: 0;
        left: 0;
        width: 1px;
        height: 1px;
        opacity: 0;
        pointer-events: none;
    }

    /* 自定义的 select 样式 */
    .create-select {
        position: relative;
        cursor: pointer;
    }

    .create-select span {
        position: relative;
        display: block;
        padding: 10px 30px 10px 10px;
        background-color: #f2f2f2;
        border: 1px solid #2c5aa0;
        color: #2c5aa0;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }

    .create-select span::after {
        pointer-events: none;
        content: '';
        position: absolute;
        top: 50%;
        right: 10px;
        transform: translateY(-50%);
        width: 0;
        height: 0;
        border-left: 5px solid transparent;
        border-right: 5px solid transparent;
        border-top: 5px solid #2c5aa0;
    }

    .create-select span.show::after {
        transform: translateY(-50%) rotate(180deg);
    }

    .create-options {
        display: none;
        list-style: none;
        margin: 0;
        padding: 0;
        z-index: 1;
        position: absolute;
        width: 100%;
        left: 0;
        top: calc(100% + 5px);
        padding: 5px;
        background-color: #f2f2f2;
        border: 1px solid #ccc;
        max-height: 200px;
        overflow-y: auto;
    }

    .create-options.show {
        display: block;
    }

    .create-options > li {
        padding: 0.5em 0;
        cursor: pointer;
    }

    .create-options > li:hover {
        background-color: #e6e6e6;
    }
</style>

<script is:inline>
    class CustomSelect {
        constructor(selectDom) {
            this.event = new Event('change', {
                bubbles: true,
                cancelable: true,
            });
            this.selectDoms = document.querySelectorAll(selectDom);
            const selectElements = Array.from(this.selectDoms);

            selectElements.forEach((item, index) => {
                const selectElement = item.querySelector('select');
                this.createSelect(selectElement);
                this.changeOption(selectElement, index);
            });
        }

        createSelect(selectElement) {
            const select = document.createElement('div');
            select.classList.add('create-select');

            const span = document.createElement('span');
            span.classList.add('current-option');
            span.textContent = selectElement.options[selectElement.selectedIndex].textContent;

            select.appendChild(span);

            const fragment = new DocumentFragment();
            const ul = document.createElement('ul');
            ul.classList.add('create-options');

            for (const option of selectElement.options) {
                const li = document.createElement('li');
                li.textContent = option.textContent;
                li.dataset.value = option.value;
                li.addEventListener('click', (event) => {
                    event.stopPropagation();
                    this.chooseOption(event, selectElement, span, ul);
                });
                fragment.appendChild(li);
            }

            ul.appendChild(fragment);
            select.appendChild(ul);

            selectElement.parentNode.appendChild(select);
        }

        chooseOption(e, selectElement, span, ul) {
            const selectedValue = e.target.dataset.value;
            span.textContent = e.target.textContent;
            selectElement.value = selectedValue;
            selectElement.dispatchEvent(this.event);
            span.classList.remove('show');
            ul.classList.remove('show');
        }

        changeOption(selectElement, index) {
            const select = selectElement.nextElementSibling;
            const span = select.querySelector('span');
            const ul = select.querySelector('.create-options');
            select.addEventListener('click', (event) => {
                event.stopPropagation();

                const selectElements = Array.from(this.selectDoms);
                selectElements.forEach((item, i) => {
                    if (i === index) {
                        return false;
                    }
                    const selectElem = item.querySelector('select');
                    const select = selectElem.nextElementSibling;
                    const span = select.querySelector('span');
                    const options = select.querySelector('.create-options');
                    span.classList.remove('show');
                    options.classList.remove('show');
                });

                if (ul.classList.contains('show')) {
                    ul.classList.remove('show');
                    span.classList.remove('show');
                } else {
                    ul.classList.add('show');
                    span.classList.add('show');
                }
            });
            document.addEventListener('click', () => {
                ul.classList.remove('show');
                span.classList.remove('show');
            });
        }
    }

    var sel = new CustomSelect('.custom-select');
    document.getElementById('sel1').addEventListener('change', function () {
        var selectedCar = document.getElementById('sel1').value;
        console.log('id1: ',selectedCar);
    });
    document.getElementById('sel2').addEventListener('change', function () {
        var selectedCar = document.getElementById('sel1').value;
        console.log('id2: ',selectedCar);
    });
</script>
