---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Welcome to Astro.">
    <main>
        <div id="container">
            <div class="grid">
                <div class="grid-item">
                    <img src="img/photos/1.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/2.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/3.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/4.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/5.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/6.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/7.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/8.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/9.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/10.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/11.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/12.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/13.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/14.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/15.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/16.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/17.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/18.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/19.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/20.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/21.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/22.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/23.jpg" />
                </div>
                <div class="grid-item">
                    <img src="img/photos/24.jpg" />
                </div>
            </div>
        </div>
    </main>
</Layout>

<style is:global>
    #container {
        margin: 0 auto;
        max-width: 922px;
        padding: 80px 0 150px;
    }
    .grid {
        position: relative;
        display: flex;
        flex-wrap: wrap;
        row-gap: 9px;
        justify-content: space-between;
    }

    .grid-item {
        height: 0;
        overflow: hidden;
    }

    .grid-item img {
        width: 100%;
        display: block;
        background-color: #f5f8fa;
    }
</style>

<script type="module">
    /**
     * @param {string} grid
     * @param {string} item
     * @param {number} rHeight
     * @param {number} rHeightTolerance
     */
    function justifiedLayout(grid, item, rHeight, rHeightTolerance) {
        const container = document.getElementById('container');
        const containerWidth = container.clientWidth;
        const $grid = document.querySelector(grid);
        const $items = Array.from(document.querySelectorAll(item));
        const $gap = window.getComputedStyle($grid).rowGap;

        const gapValue = parseFloat($gap);

        const rowHeight = rHeight || 320;
        const rowHeightTolerance = rHeightTolerance || 0.25;
        const maxAspectRatio = (containerWidth / rowHeight) * (1 + rowHeightTolerance);

        const updateItems = $items.filter((item) => {
            const result = item.classList.contains('grid-item-empty');
            if (result) {
                item.remove();
            }
            return !result;
        });

        updateItems.forEach((item) => {
            const img = item.querySelector('img');
            const ratio = img ? img.naturalWidth / img.naturalHeight : 1.5;
            item.style.setProperty('--ratio', ratio);
        });
        let sumRatio = 0;
        let tempArray = [];
        const ratioArray = [];
        const rowArray = [];
        updateItems.forEach((item) => {
            let ratio = +item.style.getPropertyValue('--ratio');
            sumRatio += ratio;
            tempArray.push(item);

            if (sumRatio > maxAspectRatio) {
                ratioArray.push(sumRatio);
                rowArray.push(tempArray);
                sumRatio = 0;
                tempArray = [];
            }
        });

        if (tempArray.length > 0) {
            while (sumRatio < maxAspectRatio) {
                const div = document.createElement('div');
                div.className = 'grid-item grid-item-empty';
                div.style.setProperty('--ratio', '1.5');
                $grid.appendChild(div);
                tempArray.push(div);
                sumRatio += 1.5;
            }
            ratioArray.push(sumRatio);
            rowArray.push(tempArray);
        }

        rowArray.forEach((row, index) => {
            const heightArray = [];
            const adjustedContainerWidth = containerWidth - (row.length - 1) * gapValue;
            const ratioItem = ratioArray[index] > maxAspectRatio ? ratioArray[index] : maxAspectRatio;
            const widthRatio = adjustedContainerWidth / ratioItem;
            row.forEach((item) => {
                item.style.height = '';
                const width = (widthRatio * +item.style.getPropertyValue('--ratio')).toFixed(0) + 'px';
                item.style.width = width;
                const img = item.querySelector('img');
                const height = img ? img.offsetHeight : window.innerHeight;
                heightArray.push(height);
            });
            const minHeight = Math.min(...heightArray);
            row.forEach((item) => {
                item.style.height = minHeight.toFixed(0) + 'px';
            });
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        justifiedLayout('.grid', '.grid-item', 320, 0.45);
    });

    window.addEventListener('resize', function () {
        justifiedLayout('.grid', '.grid-item', 320, 0.45);
    });
</script>
